// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Int32 = require("rescript/lib/js/int32.js");
var $$String = require("rescript/lib/js/string.js");
var CryptoJs = require("crypto-js");

function create(index, previous_hash, timestamp, data, hash) {
  return {
          index: index,
          previous_hash: previous_hash,
          timestamp: timestamp,
          data: data,
          hash: hash
        };
}

function calculate_hash(index, previous_hash, timestamp, data) {
  var index$1 = Int32.to_string(index);
  var timestamp$1 = Int32.to_string(timestamp);
  return CryptoJs.SHA256($$String.concat("-", {
                  hd: index$1,
                  tl: {
                    hd: previous_hash,
                    tl: {
                      hd: timestamp$1,
                      tl: {
                        hd: data,
                        tl: /* [] */0
                      }
                    }
                  }
                }));
}

function calculate_hash_for(block) {
  return calculate_hash(block.index, block.previous_hash, block.timestamp, block.data);
}

function valid(new_block, previous_block) {
  var new_block_hash = calculate_hash_for(new_block);
  if ((previous_block.index + 1 | 0) !== new_block.index) {
    console.log("invalid index");
    return false;
  } else if (previous_block.hash !== new_block.previous_hash || previous_block.hash !== new_block.previous_hash) {
    console.log("invalid previous hash");
    return false;
  } else if (new_block_hash !== new_block.hash) {
    console.log("invalid hash: " + new_block_hash + " <-> " + new_block.hash);
    return false;
  } else {
    return true;
  }
}

var genesis = {
  index: 0,
  previous_hash: "0",
  timestamp: 1465154705,
  data: "my genesis block!!",
  hash: "816534932c2b7154836da6afc367695e6337db8a921823784c14378abed4f7d7"
};

exports.create = create;
exports.calculate_hash = calculate_hash;
exports.genesis = genesis;
exports.calculate_hash_for = calculate_hash_for;
exports.valid = valid;
/* crypto-js Not a pure module */
